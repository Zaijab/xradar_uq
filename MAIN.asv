clear
clc
%%
close all
%%
runKDE = false;
runGUE = false;
runEnGMM = true;
screenshotPlots = false;
compileToVideo = false;

% Gravitational constant
mu = 0.012150584269940; 

nSamples = 100;
displaySamples = 100;

% Specify initial mean for object CRTBP non-dimensionalized coordinates
mu_initial = [1.021339954388544 -0.000000045869005 -0.181619950369762 0.000000617839352 -0.101759879771430 0.000001049698173]'; % mean.rot.t0;  % mean of initial state (in rotating frame)
P_initial = 1.0e-08 *[ ...
   0.067741479217036  -0.000029214433641   0.000292500436172   0.000343197998120  -0.000801894296500  -0.000076851751508
  -0.000029214433641   0.067949657828148  -0.000045655889447   0.000112485276059   0.002893878948354  -0.000038999497288
   0.000292500436172  -0.000045655889447   0.067754170807105  -0.000931574297640   0.000434803811832   0.000042975146838
   0.000343197998120   0.000112485276059  -0.000931574297640   0.950650788374193   0.004879599683572   0.000839738344685
  -0.000801894296500   0.002893878948354   0.000434803811832   0.004879599683572   0.955575624017479  -0.002913896437441
  -0.000076851751508  -0.000038999497288   0.000042975146838   0.000839738344685  -0.002913896437441   0.954675354567578];

ICs = mvnrnd(mu_initial, P_initial, nSamples);

measurementInterval = 0.005;
frameInterval = 0.001;

% set up initial time and final time (non dimensional)
t0 = 0;      
tf = 0.75103;

% Initialize Condition is Gaussian
nX     = 6;  
w0     = {1};
m0     = {mu_initial};
P0     = {P_initial};
              
dH = 1.455021851351014; 

[t, Y] = PropagateSamples(ICs, t0, frameInterval, measurementInterval);

%%
% writematrix(Y', fullfile("Data","PropagatedStates.csv"));
% writematrix(Y0', fullfile("Data","InitialStates.csv"));
%%
%%%%% KDE
if runKDE
    Nks = 100;
    % XY
    xvec  = linspace(min(Y(1,:)),max(Y(1,:)),Nks);
    yvec  = linspace(min(Y(2,:)),max(Y(2,:)),Nks);
    [XI,YI] = meshgrid(xvec',yvec');
    XY = [reshape(XI,Nks^2,1),reshape(YI,Nks^2,1)];
    Fxy = ksdensity(Y([1,2],:)', XY);
    
    % XZ
    xvec  = linspace(min(Y(1,:)),max(Y(1,:)),Nks);
    yvec  = linspace(min(Y(3,:)),max(Y(3,:)),Nks);
    [XI,YI] = meshgrid(xvec',yvec');
    XZ = [reshape(XI,Nks^2,1),reshape(YI,Nks^2,1)];
    Fxz = ksdensity(Y([1,3],:)', XZ);  
    
    % YZ
    xvec  = linspace(min(Y(2,:)),max(Y(2,:)),Nks);
    yvec  = linspace(min(Y(3,:)),max(Y(3,:)),Nks);
    [XI,YI] = meshgrid(xvec',yvec');
    YZ = [reshape(XI,Nks^2,1),reshape(YI,Nks^2,1)];
    Fyz = ksdensity(Y([2,3],:)', YZ);
end


%% GMM - UKF - EKF
if runGUE
    
    tic
    [wf,mf,Pf] = prop_ptbp(t0,tf,w0,m0,P0,dH,Inf,[],mu);
    toc
    disp(['Number of components NEW = ',num2str(length(wf))])
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% PLOTS
animationImagesFolder = 'Plots';
f = figure('Units', 'pixels', 'Position', [100 100 1000 800]);
% set(f, 'Color', 'k')
% for i = 1:4
%     ax = subplot(2, 2, i);
% 
%     set(ax, 'Color', 'k');  
% 
%     set(ax, 'XColor', 'w', 'YColor', 'w', 'GridColor', 'w');
% end

for tIdx = numel(t)
    % DATA POINTS
    
    subplot(2,2,1)
    plot(Y(1:displaySamples,1,tIdx),Y(1:displaySamples,2,tIdx),'.','color',[.5 .5 .5]);
    title("XY")
    xlabel('x-Position [LU]')
    ylabel('y-Position [LU]')
    grid on
    hold off
    
    subplot(2,2,2)
    plot(Y(1:displaySamples,1,tIdx),Y(1:displaySamples,3,tIdx),'.','color',[.5 .5 .5]);
    title("XZ")
    xlabel('x-Position [LU]')
    ylabel('z-Position [LU]')
    grid on
    hold off
    
    subplot(2,2,3)
    plot(Y(1:displaySamples,2,tIdx),Y(1:displaySamples,3,tIdx),'.','color',[.5 .5 .5]);
    title("YZ")
    xlabel('y-Position [LU]')
    ylabel('z-Position [LU]')
    grid on
    hold off
    
    subplot(2,2,4);
    hold on
    
    margin = 2e-2;
    for idx = 1:nSamples
        plot3(squeeze(Y(idx,1,1:tIdx)), squeeze(Y(idx,2,1:tIdx)), squeeze(Y(idx,3,1:tIdx)),'-','color',[.5 .5 .5]);
    end
    % xmean = mean(Y(:,1,tIdx));
    % ymean = mean(Y(:,2,tIdx));
    % zmean = mean(Y(:,3,tIdx));
    % xlim([xmean-margin, xmean+margin]);
    % ylim([ymean-margin, ymean+margin]);
    % zlim([zmean-margin, zmean+margin]);
    % view(45,30);
    % hold off
    


    % % KDE 
    if runKDE
        subplot(2,2,1);
        contour(reshape(XY(:,1),Nks,Nks),reshape(XY(:,2),Nks,Nks),reshape(Fxy,Nks,Nks), ...
            'Color','b','LineWidth',2);
        
        subplot(2,2,2);
        contour(reshape(XZ(:,1),Nks,Nks),reshape(XZ(:,2),Nks,Nks),reshape(Fxz,Nks,Nks), ...
           'Color','b','LineWidth',2);
        
        subplot(2,2,3);
        contour(reshape(YZ(:,1),Nks,Nks),reshape(YZ(:,2),Nks,Nks),reshape(Fyz,Nks,Nks), ...
            'Color','b','LineWidth',2);
    end
    
    if screenshotPlots
        set(gcf, 'Units', 'pixels', 'Position', [100 100 1000 800]);
        filename = fullfile(animationImagesFolder, sprintf('frame_%04d.png', tIdx));
        frame = getframe(f);
        imwrite(frame.cdata, filename);
    end

    pause(0.2)
end
% 
% % GMM-UKF-EKF
% figure(1)
% [pNEW,XNEW,YNEW,~,~] = gmmpdf(wf,mf,Pf,[1;2],800,6);
% contour(XNEW,YNEW,pNEW,'--', 'Color','r','LineWidth',2);% ,[1.311, 9.358, 20.12, 30.08, 40.18]*1e-5, % contours from kirsten's plots for LEO example
% xlabel('x-Position [LU]')
% ylabel('y-Position [LU]')
% hold off
% 
% figure(2)
% [pNEW,XNEW,YNEW,~,~] = gmmpdf(wf,mf,Pf,[1;3],800,6);
% contour(XNEW,YNEW,pNEW,'--', 'Color','r','LineWidth',2); % ,[1.311, 9.358, 20.12, 30.08, 40.18]*1e-5,
% xlabel('x-Position [LU]')
% ylabel('z-Position [LU]')
% hold off
% 
% figure(3)
% [pNEW,XNEW,YNEW,~,~] = gmmpdf(wf,mf,Pf,[2;3],800,6);
% contour(XNEW,YNEW,pNEW,'--','Color','r','LineWidth',2) 
% xlabel('y-Position [LU]')
% ylabel('z-Position [LU]')
% hold off

%% COMPILE TO VIDEO

if compileToVideo
    if isfile('trajectory_movie.mp4')
        delete('trajectory_movie.mp4');
    end
        outputVideo = VideoWriter('trajectory_movie.mp4', 'MPEG-4');
        outputVideo.FrameRate = 24;  % Adjust frame rate as desired
        open(outputVideo);
        
        imageFiles = dir(fullfile(animationImagesFolder, 'frame_*.png'));
        [~, idx] = sort({imageFiles.name});
        imageFiles = imageFiles(idx);
        
        for k = 1:length(imageFiles)
            img = imread(fullfile(animationImagesFolder, imageFiles(k).name));
            writeVideo(outputVideo, img);
        end
        
        close(outputVideo);
        disp('Video saved as trajectory_movie.mp4');

end